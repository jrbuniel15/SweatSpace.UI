/**
 * SweatSpace.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AddWorkoutRequest } from '../model/addWorkoutRequest';
import { UpdateWorkoutRequest } from '../model/updateWorkoutRequest';
import { WorkoutResponse } from '../model/workoutResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WorkoutsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkout(id: number, observe?: 'body', reportProgress?: boolean): Observable<WorkoutResponse>;
    public getWorkout(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkoutResponse>>;
    public getWorkout(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkoutResponse>>;
    public getWorkout(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getWorkout.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<WorkoutResponse>('get',`${this.basePath}/Workouts/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets workouts paginated
     * 
     * @param UserId 
     * @param FilterBy 
     * @param PageNumber 
     * @param ItemsPerPage 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public workoutsGet(UserId?: number, FilterBy?: string, PageNumber?: number, ItemsPerPage?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<WorkoutResponse>>;
    public workoutsGet(UserId?: number, FilterBy?: string, PageNumber?: number, ItemsPerPage?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<WorkoutResponse>>>;
    public workoutsGet(UserId?: number, FilterBy?: string, PageNumber?: number, ItemsPerPage?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<WorkoutResponse>>>;
    public workoutsGet(UserId?: number, FilterBy?: string, PageNumber?: number, ItemsPerPage?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (UserId !== undefined && UserId !== null) {
            queryParameters = queryParameters.set('UserId', <any>UserId);
        }
        if (FilterBy !== undefined && FilterBy !== null) {
            queryParameters = queryParameters.set('FilterBy', <any>FilterBy);
        }
        if (PageNumber !== undefined && PageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>PageNumber);
        }
        if (ItemsPerPage !== undefined && ItemsPerPage !== null) {
            queryParameters = queryParameters.set('ItemsPerPage', <any>ItemsPerPage);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<WorkoutResponse>>('get',`${this.basePath}/Workouts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public workoutsPost(body?: AddWorkoutRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public workoutsPost(body?: AddWorkoutRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public workoutsPost(body?: AddWorkoutRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public workoutsPost(body?: AddWorkoutRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/Workouts`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Toggles the completed state of a workout
     * 
     * @param workoutId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public workoutsWorkoutIdCompletedPost(workoutId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public workoutsWorkoutIdCompletedPost(workoutId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public workoutsWorkoutIdCompletedPost(workoutId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public workoutsWorkoutIdCompletedPost(workoutId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (workoutId === null || workoutId === undefined) {
            throw new Error('Required parameter workoutId was null or undefined when calling workoutsWorkoutIdCompletedPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/Workouts/${encodeURIComponent(String(workoutId))}/completed`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param workoutId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public workoutsWorkoutIdCopyPost(workoutId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public workoutsWorkoutIdCopyPost(workoutId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public workoutsWorkoutIdCopyPost(workoutId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public workoutsWorkoutIdCopyPost(workoutId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (workoutId === null || workoutId === undefined) {
            throw new Error('Required parameter workoutId was null or undefined when calling workoutsWorkoutIdCopyPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/Workouts/${encodeURIComponent(String(workoutId))}/copy`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param workoutId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public workoutsWorkoutIdDelete(workoutId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public workoutsWorkoutIdDelete(workoutId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public workoutsWorkoutIdDelete(workoutId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public workoutsWorkoutIdDelete(workoutId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (workoutId === null || workoutId === undefined) {
            throw new Error('Required parameter workoutId was null or undefined when calling workoutsWorkoutIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/Workouts/${encodeURIComponent(String(workoutId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fully updates an existing workout
     * 
     * @param workoutId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public workoutsWorkoutIdPut(workoutId: number, body?: UpdateWorkoutRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public workoutsWorkoutIdPut(workoutId: number, body?: UpdateWorkoutRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public workoutsWorkoutIdPut(workoutId: number, body?: UpdateWorkoutRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public workoutsWorkoutIdPut(workoutId: number, body?: UpdateWorkoutRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (workoutId === null || workoutId === undefined) {
            throw new Error('Required parameter workoutId was null or undefined when calling workoutsWorkoutIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/Workouts/${encodeURIComponent(String(workoutId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resets a workouts stats including its exercises
     * 
     * @param workoutId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public workoutsWorkoutIdResetPost(workoutId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public workoutsWorkoutIdResetPost(workoutId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public workoutsWorkoutIdResetPost(workoutId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public workoutsWorkoutIdResetPost(workoutId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (workoutId === null || workoutId === undefined) {
            throw new Error('Required parameter workoutId was null or undefined when calling workoutsWorkoutIdResetPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/Workouts/${encodeURIComponent(String(workoutId))}/reset`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param workoutId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public workoutsWorkoutIdToggleLikePost(workoutId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public workoutsWorkoutIdToggleLikePost(workoutId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public workoutsWorkoutIdToggleLikePost(workoutId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public workoutsWorkoutIdToggleLikePost(workoutId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (workoutId === null || workoutId === undefined) {
            throw new Error('Required parameter workoutId was null or undefined when calling workoutsWorkoutIdToggleLikePost.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/Workouts/${encodeURIComponent(String(workoutId))}/toggle-like`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
